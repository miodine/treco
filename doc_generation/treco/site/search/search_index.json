{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"treco","title":"Home"},{"location":"#treco","text":"","title":"treco"},{"location":"api_reference/","text":"","title":"API"},{"location":"user_guide/","text":"API","title":"User Guide"},{"location":"user_guide/#api","text":"","title":"API"},{"location":"modules/core/","text":"Necessary imports import pandas as pd import requests from bs4 import BeautifulSoup import json Common constants HEADERS = {\"User-Agent\": \"TrecoBot/1.0\"} # The request header. The main website URL from which we scrape the data. MAIN_URL = \"https://tradingeconomics.com/\" ''' treco.core MODULE DESCRIPTION The module contains all core utilities and functions of the package related to data extraction from tradingeconomics. The functions presented here are NOT meant to be called by the user. ''' def __format_dataframe(dataframe: pd.DataFrame, fmt: str): ''' ## Description Helper function to change the format of a dataframe. By default, data handling is meant to be using Pandas' dataframe, but if needed - some other format can be used. ## Supported formats: * DataFrame - in-program data exchange * json - file handling/in-program data exchange * csv - file handling * dict - in-program data exchange * html - file handling * pickle - file handling * latex - file handling / string manipulation ## Parameters: dataframe : dataframe to-be converted. fmt : target format for the df to be converted, as a string. Case insensitive. ''' fmt = fmt.lower() if fmt == \"json\": return dataframe.to_json() elif fmt == \"csv\": return dataframe.to_csv() elif fmt == \"dict\": return dataframe.to_dict() elif fmt == \"html\": return dataframe.to_html() elif fmt == \"numpy\" or \"np\": return dataframe.to_numpy() elif fmt == \"pickle\": return dataframe.to_pickle() elif fmt == \"latex\": return dataframe.to_latex() else: return dataframe def get_data_from_stream(begin=0, size=1, country=\"NULL\", category=\"NULL\") -> list: ''' ## Description The function requests and receives the data directly from news stream back-end endpoint. ## Parameters begin : initial index of the news to be scraped. The news are ordered always from the newest (index == 0) to the oldest (index == len(database)) size : number of news to be scraped. (max == 100) ## Returns result_json : list of dictionaries constructed on the basis of JSON response. ## Notes It is a very simple function, manipulating the get request string. It's capabilities are limited by built-in safety mechanisms such as this one - the maximum amount of news to be scraped cannot exceed 100 news in a single querry. To obtain more (consecutive) news, for example 300, one would have to: 1. Set index to 0 2. Set the size to 100 3. Scrape the data from 0 to 0+100 indices, then again... 3. Set the beginning index to 100 (hundreth scraped news) 4. Set the size to 100 (max) 5. Scrape the data - from 100 to 100+100 ''' headers = HEADERS stream_url = \"https://tradingeconomics.com/ws/stream.ashx\" stream_get_args = \"?start={begin}&size={size}\".format( begin=begin, size=size) if country != \"NULL\": stream_get_args += \"c={}\".format(country.lower().replace(\" \", \"+\")) if country != \"NULL\": stream_get_args += \"i={}\".format(category.lower().replace(\" \", \"+\")) url = stream_url + stream_get_args resp = requests.get(url, headers=headers) soup = BeautifulSoup(resp.content, \"html.parser\", from_encoding=\"utf-8\") result_json = json.loads(soup.text.encode(\"utf-8\", \"ignore\")) return result_json def get_data_from_tables(url: str) -> list: ''' ## Description Function allowing to obtain data from the tables presented on the website. The function finds all the tables in given page, downloads its contents, and returns them in the form of list of dataframes (each dataframe represent different table). ## Parameters url : address from which we're scraping the data ## Returns df_tables_list : list of dataframes ''' headers = HEADERS response = requests.get(url=url, headers=headers) soup = BeautifulSoup(response.content, \"html.parser\") tables = soup.find_all(\"table\", \"table\") df_tables_list = [] for table in tables: df_table = pd.read_html(str(table)) df_tables_list.append(df_table[0]) return df_tables_list def scrape_specific_tables(server_path, fmt): ''' ## Description Encapsulation of some of the utilities used by the other modules, for scraping data from tables. ## Params server_path : hard-coded part of the URL adres with presented tables fmt : format of the resulting querry ## Returns dataframe_list ''' url = MAIN_URL + server_path dataframe_list = get_data_from_tables(url) for dataframe in dataframe_list: __format_dataframe(dataframe=dataframe, fmt=fmt) return dataframe_list def get_data_from_lists(url: str, as_list=False): ''' ## Description Function allowing to obtain data from the lists presented on the website. The function finds all the list in given page, downloads its contents, and returns them. ## Parameters url : address from which we're scraping the data as_list : if True -> the returned value is list of dictionaries. Otherwise it's a dictionary of dictionaries. ## Returns df_return : dictionary of dictionaires or list of dictionaries depending on - as_list parameter ''' headers = HEADERS response = requests.get(url=url, headers=headers) soup = BeautifulSoup(response.content, \"html.parser\") lists = soup.find_all(\"ul\", {\"class\": \"list-unstyled\"}) df_return = {} if as_list: df_return = [] for list_ in lists: list_contents = list_.find_all(\"li\") df_list_contents = {} key = \"\" for list_item in list_contents: a = list_item.find(\"a\") if a is not None: df_list_contents[list_item.text] = a.get(\"href\") else: key = list_item.text if as_list == True: df_return.append([key, df_list_contents]) else: df_return[key] = df_list_contents return df_return","title":"forecasts"},{"location":"modules/core/#necessary-imports","text":"import pandas as pd import requests from bs4 import BeautifulSoup import json","title":"Necessary imports"},{"location":"modules/core/#common-constants","text":"HEADERS = {\"User-Agent\": \"TrecoBot/1.0\"} # The request header.","title":"Common constants"},{"location":"modules/core/#the-main-website-url-from-which-we-scrape-the-data","text":"MAIN_URL = \"https://tradingeconomics.com/\" '''","title":"The main website URL from which we scrape the data."},{"location":"modules/core/#trecocore","text":"","title":"treco.core"},{"location":"modules/core/#module-description","text":"The module contains all core utilities and functions of the package related to data extraction from tradingeconomics. The functions presented here are NOT meant to be called by the user. ''' def __format_dataframe(dataframe: pd.DataFrame, fmt: str): ''' ## Description Helper function to change the format of a dataframe. By default, data handling is meant to be using Pandas' dataframe, but if needed - some other format can be used. ## Supported formats: * DataFrame - in-program data exchange * json - file handling/in-program data exchange * csv - file handling * dict - in-program data exchange * html - file handling * pickle - file handling * latex - file handling / string manipulation ## Parameters: dataframe : dataframe to-be converted. fmt : target format for the df to be converted, as a string. Case insensitive. ''' fmt = fmt.lower() if fmt == \"json\": return dataframe.to_json() elif fmt == \"csv\": return dataframe.to_csv() elif fmt == \"dict\": return dataframe.to_dict() elif fmt == \"html\": return dataframe.to_html() elif fmt == \"numpy\" or \"np\": return dataframe.to_numpy() elif fmt == \"pickle\": return dataframe.to_pickle() elif fmt == \"latex\": return dataframe.to_latex() else: return dataframe def get_data_from_stream(begin=0, size=1, country=\"NULL\", category=\"NULL\") -> list: ''' ## Description The function requests and receives the data directly from news stream back-end endpoint. ## Parameters begin : initial index of the news to be scraped. The news are ordered always from the newest (index == 0) to the oldest (index == len(database)) size : number of news to be scraped. (max == 100) ## Returns result_json : list of dictionaries constructed on the basis of JSON response. ## Notes It is a very simple function, manipulating the get request string. It's capabilities are limited by built-in safety mechanisms such as this one - the maximum amount of news to be scraped cannot exceed 100 news in a single querry. To obtain more (consecutive) news, for example 300, one would have to: 1. Set index to 0 2. Set the size to 100 3. Scrape the data from 0 to 0+100 indices, then again... 3. Set the beginning index to 100 (hundreth scraped news) 4. Set the size to 100 (max) 5. Scrape the data - from 100 to 100+100 ''' headers = HEADERS stream_url = \"https://tradingeconomics.com/ws/stream.ashx\" stream_get_args = \"?start={begin}&size={size}\".format( begin=begin, size=size) if country != \"NULL\": stream_get_args += \"c={}\".format(country.lower().replace(\" \", \"+\")) if country != \"NULL\": stream_get_args += \"i={}\".format(category.lower().replace(\" \", \"+\")) url = stream_url + stream_get_args resp = requests.get(url, headers=headers) soup = BeautifulSoup(resp.content, \"html.parser\", from_encoding=\"utf-8\") result_json = json.loads(soup.text.encode(\"utf-8\", \"ignore\")) return result_json def get_data_from_tables(url: str) -> list: ''' ## Description Function allowing to obtain data from the tables presented on the website. The function finds all the tables in given page, downloads its contents, and returns them in the form of list of dataframes (each dataframe represent different table). ## Parameters url : address from which we're scraping the data ## Returns df_tables_list : list of dataframes ''' headers = HEADERS response = requests.get(url=url, headers=headers) soup = BeautifulSoup(response.content, \"html.parser\") tables = soup.find_all(\"table\", \"table\") df_tables_list = [] for table in tables: df_table = pd.read_html(str(table)) df_tables_list.append(df_table[0]) return df_tables_list def scrape_specific_tables(server_path, fmt): ''' ## Description Encapsulation of some of the utilities used by the other modules, for scraping data from tables. ## Params server_path : hard-coded part of the URL adres with presented tables fmt : format of the resulting querry ## Returns dataframe_list ''' url = MAIN_URL + server_path dataframe_list = get_data_from_tables(url) for dataframe in dataframe_list: __format_dataframe(dataframe=dataframe, fmt=fmt) return dataframe_list def get_data_from_lists(url: str, as_list=False): ''' ## Description Function allowing to obtain data from the lists presented on the website. The function finds all the list in given page, downloads its contents, and returns them. ## Parameters url : address from which we're scraping the data as_list : if True -> the returned value is list of dictionaries. Otherwise it's a dictionary of dictionaries. ## Returns df_return : dictionary of dictionaires or list of dictionaries depending on - as_list parameter ''' headers = HEADERS response = requests.get(url=url, headers=headers) soup = BeautifulSoup(response.content, \"html.parser\") lists = soup.find_all(\"ul\", {\"class\": \"list-unstyled\"}) df_return = {} if as_list: df_return = [] for list_ in lists: list_contents = list_.find_all(\"li\") df_list_contents = {} key = \"\" for list_item in list_contents: a = list_item.find(\"a\") if a is not None: df_list_contents[list_item.text] = a.get(\"href\") else: key = list_item.text if as_list == True: df_return.append([key, df_list_contents]) else: df_return[key] = df_list_contents return df_return","title":"MODULE DESCRIPTION"},{"location":"modules/extras/","text":"from treco.core import HEADERS, MAIN_URL, get_data_from_tables from treco.core import get_data_from_stream treco.extras Module description All the extra functions. news(amount, country, category): Description Get the last news published on the Trading Economics stream. It is a get_data_from_stream() wrapper as for now. Parameters amount : number of news to retrieve. country : the name of the country (like 'France', or economic area, like 'G20' or 'euro-area'), which the news concern. category : category of news Returns (inferred) -> result_json : list of dictionaries constructed on the basis of JSON response. return get_data_from_stream(size=amount, country=country, category=category) def heatmap(region=\"\"): Description Get the heatmap, avalialbe under '/matrix' subpage. Parameters region : economic area for which the heatmap indicators are displayed. Returns ret_val : heatmap, Pandas dfs format.","title":"extras"},{"location":"modules/extras/#trecoextras","text":"","title":"treco.extras"},{"location":"modules/extras/#module-description","text":"All the extra functions.","title":"Module description"},{"location":"modules/extras/#newsamount-country-category","text":"","title":"news(amount, country, category):"},{"location":"modules/extras/#description","text":"Get the last news published on the Trading Economics stream. It is a get_data_from_stream() wrapper as for now.","title":"Description"},{"location":"modules/extras/#parameters","text":"amount : number of news to retrieve. country : the name of the country (like 'France', or economic area, like 'G20' or 'euro-area'), which the news concern. category : category of news","title":"Parameters"},{"location":"modules/extras/#returns","text":"(inferred) -> result_json : list of dictionaries constructed on the basis of JSON response. return get_data_from_stream(size=amount, country=country, category=category)","title":"Returns"},{"location":"modules/extras/#def-heatmapregion","text":"","title":"def heatmap(region=\"\"):"},{"location":"modules/extras/#description_1","text":"Get the heatmap, avalialbe under '/matrix' subpage.","title":"Description"},{"location":"modules/extras/#parameters_1","text":"region : economic area for which the heatmap indicators are displayed.","title":"Parameters"},{"location":"modules/extras/#returns_1","text":"ret_val : heatmap, Pandas dfs format.","title":"Returns"},{"location":"modules/forecasts/","text":"from treco.core import MAIN_URL, get_data_from_tables, scrape_specific_tables ''' treco.forecasts Module description Functions for getting forecast on 1. macro-economic indicators 2. real asset related quantities. ''' def forecasts_by_country(region): ''' ## Description Forecast for all macro-economic indicators related to given country/region/area. ## Parameters region : geographical region name. ## Returns ''' url = MAIN_URL + \"/\" + region.replace(\" \", \"-\") + \"/forecasts\" forecast_lists = get_data_from_tables(url) return forecast_lists def countries_by_forecast(indicator: str, scope=\"World\"): ''' ## Description Returns a forecast of one selected indicator for multiple all the regions in given scope. ## Parameters indicator : name of the indicator to search for. scope : geographical cluster of countries. ## Returns region_forecast_by_one_indicator : self explanatory. ''' url = ( MAIN_URL + \"/forecast/\" + indicator.lower().replace(\" \", \"-\") + \"?continent=\" + scope ) region_forecast_by_one_indicator = get_data_from_tables(url) return region_forecast_by_one_indicator def currencies_forecast(fmt): ''' ## Description Returns forecast of FX currency prices, as a list-of-tables. Each entry in the list correspond to different geographic region. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with currency pair ratios forecast ''' ret_val = scrape_specific_tables(\"/forecast/currency\", fmt) return ret_val def stock_indices_forecast(fmt): ''' ## Description Provides forecast for stock market indexes quotes for several countries including the latest price, yesterday session close, plus weekly, monthly and yearly percentage changes. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with stock indices forecast ''' ret_val = scrape_specific_tables(\"/forecast/stock-market\", fmt) return ret_val def commodities_forecast(fmt): ''' ## Description Provides forecast for the comodity prices. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with major comodity prices forecast ''' ret_val = scrape_specific_tables(\"/forecast/commodity\", fmt) return ret_val def bonds_forecast(fmt, show_all=True): ''' ## Description Provides forecast for the bond prices. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with bonds data forecast ''' if show_all == True: ret_val = scrape_specific_tables(\"/forecast/government-bond-10y\", fmt) return ret_val def crypto_forecast(fmt): ''' ## Description Provides crypto forecast. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with cryptocurrency data forecast ''' ret_val = scrape_specific_tables(\"/forecast/crypto\", fmt) return ret_val","title":"Forecasts"},{"location":"modules/forecasts/#trecoforecasts","text":"","title":"treco.forecasts"},{"location":"modules/forecasts/#module-description","text":"Functions for getting forecast on 1. macro-economic indicators 2. real asset related quantities. ''' def forecasts_by_country(region): ''' ## Description Forecast for all macro-economic indicators related to given country/region/area. ## Parameters region : geographical region name. ## Returns ''' url = MAIN_URL + \"/\" + region.replace(\" \", \"-\") + \"/forecasts\" forecast_lists = get_data_from_tables(url) return forecast_lists def countries_by_forecast(indicator: str, scope=\"World\"): ''' ## Description Returns a forecast of one selected indicator for multiple all the regions in given scope. ## Parameters indicator : name of the indicator to search for. scope : geographical cluster of countries. ## Returns region_forecast_by_one_indicator : self explanatory. ''' url = ( MAIN_URL + \"/forecast/\" + indicator.lower().replace(\" \", \"-\") + \"?continent=\" + scope ) region_forecast_by_one_indicator = get_data_from_tables(url) return region_forecast_by_one_indicator def currencies_forecast(fmt): ''' ## Description Returns forecast of FX currency prices, as a list-of-tables. Each entry in the list correspond to different geographic region. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with currency pair ratios forecast ''' ret_val = scrape_specific_tables(\"/forecast/currency\", fmt) return ret_val def stock_indices_forecast(fmt): ''' ## Description Provides forecast for stock market indexes quotes for several countries including the latest price, yesterday session close, plus weekly, monthly and yearly percentage changes. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with stock indices forecast ''' ret_val = scrape_specific_tables(\"/forecast/stock-market\", fmt) return ret_val def commodities_forecast(fmt): ''' ## Description Provides forecast for the comodity prices. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with major comodity prices forecast ''' ret_val = scrape_specific_tables(\"/forecast/commodity\", fmt) return ret_val def bonds_forecast(fmt, show_all=True): ''' ## Description Provides forecast for the bond prices. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with bonds data forecast ''' if show_all == True: ret_val = scrape_specific_tables(\"/forecast/government-bond-10y\", fmt) return ret_val def crypto_forecast(fmt): ''' ## Description Provides crypto forecast. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with cryptocurrency data forecast ''' ret_val = scrape_specific_tables(\"/forecast/crypto\", fmt) return ret_val","title":"Module description"},{"location":"modules/indicators/","text":"from treco.core import get_data_from_tables, MAIN_URL ''' treco.indicators Module description Functions for getting current macro-economic indicators. ''' def indicators_by_region(region): ''' ## Description List all macro-economic indicators related to given country/region/area. ## Parameters region : geographical region name. ## Returns indicator_lists : list of dataframes with scraped indicators. ''' url = MAIN_URL + \"/\" + region.replace(\" \", \"-\") + \"/indicators\" indicator_lists = get_data_from_tables(url) return indicator_lists def regions_via_indicator(indicator: str, scope=\"World\"): ''' ## Description Returns a comparison of all regions/countries by one selected indicator. ## Parameters indicator : name of the indicator to search for. scope : geographical cluster of countries. ## Returns region_comparison_by_one_indicator : self explanatory. ''' url = ( MAIN_URL + \"/country-list/\" + indicator.lower().replace(\" \", \"-\") + \"?continent=\" + scope ) region_comparison_by_one_indicator = get_data_from_tables(url) return region_comparison_by_one_indicator","title":"indicators"},{"location":"modules/indicators/#trecoindicators","text":"","title":"treco.indicators"},{"location":"modules/indicators/#module-description","text":"Functions for getting current macro-economic indicators. ''' def indicators_by_region(region): ''' ## Description List all macro-economic indicators related to given country/region/area. ## Parameters region : geographical region name. ## Returns indicator_lists : list of dataframes with scraped indicators. ''' url = MAIN_URL + \"/\" + region.replace(\" \", \"-\") + \"/indicators\" indicator_lists = get_data_from_tables(url) return indicator_lists def regions_via_indicator(indicator: str, scope=\"World\"): ''' ## Description Returns a comparison of all regions/countries by one selected indicator. ## Parameters indicator : name of the indicator to search for. scope : geographical cluster of countries. ## Returns region_comparison_by_one_indicator : self explanatory. ''' url = ( MAIN_URL + \"/country-list/\" + indicator.lower().replace(\" \", \"-\") + \"?continent=\" + scope ) region_comparison_by_one_indicator = get_data_from_tables(url) return region_comparison_by_one_indicator","title":"Module description"},{"location":"modules/markets/","text":"from treco.core import scrape_specific_tables treco.markets Module description Set of functions allowing to get the current values of real asset related quantities. The functions return lists of tables. The data in each table is formatted in a fixed way; that is: Name of the indicator Actual value (price, ratio, quotation etc.) Point-wise change daily Percentage change daily Percentage change weekly Percentage change monthly Percentage YoY Today's date. def currencies(fmt): ## Description Returns FX currency prices, as a list-of-tables. Each entry in the list correspond to different geographic region. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with currency pair ratios ret_val = scrape_specific_tables(\"/currencies\", fmt) return ret_val def stock_indices(fmt): ## Description provides stock market indexes quotes for several countries including the latest price, yesterday session close, plus weekly, monthly and yearly percentage changes. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with stock indices ret_val = scrape_specific_tables(\"/stocks\", fmt) return ret_val def commodities(fmt): ## Description Provides current commodity prices. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with major comodity prices ret_val = scrape_specific_tables(\"/commodities\", fmt) return ret_val def bonds(fmt): ## Description Provides current prices for global bond market. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with bonds data ret_val = scrape_specific_tables(\"/bonds\", fmt) return ret_val def crypto(fmt): ## Description Provides current prices for major cryptocurrencies. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with cryptocurrency data ret_val = scrape_specific_tables(\"/crypto\", fmt) return ret_val","title":"markets"},{"location":"modules/markets/#trecomarkets","text":"","title":"treco.markets"},{"location":"modules/markets/#module-description","text":"Set of functions allowing to get the current values of real asset related quantities. The functions return lists of tables. The data in each table is formatted in a fixed way; that is: Name of the indicator Actual value (price, ratio, quotation etc.) Point-wise change daily Percentage change daily Percentage change weekly Percentage change monthly Percentage YoY Today's date. def currencies(fmt): ## Description Returns FX currency prices, as a list-of-tables. Each entry in the list correspond to different geographic region. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with currency pair ratios ret_val = scrape_specific_tables(\"/currencies\", fmt) return ret_val def stock_indices(fmt): ## Description provides stock market indexes quotes for several countries including the latest price, yesterday session close, plus weekly, monthly and yearly percentage changes. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with stock indices ret_val = scrape_specific_tables(\"/stocks\", fmt) return ret_val def commodities(fmt): ## Description Provides current commodity prices. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with major comodity prices ret_val = scrape_specific_tables(\"/commodities\", fmt) return ret_val def bonds(fmt): ## Description Provides current prices for global bond market. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with bonds data ret_val = scrape_specific_tables(\"/bonds\", fmt) return ret_val def crypto(fmt): ## Description Provides current prices for major cryptocurrencies. ## Parameters fmt : desired output dataframe format ## Returns ret_val : dataframe with cryptocurrency data ret_val = scrape_specific_tables(\"/crypto\", fmt) return ret_val","title":"Module description"}]}